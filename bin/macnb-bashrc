#!/bin/bash
# -*- shell-script -*-
#
# mac-notebook utilities
#


function echo-stderr() {
    echo >&2 "$@"
}

### macnb-find-enclosing-miniconda()
#
# PURPOSE
# expects zero or one argument, existing file or dir (or pwd)
#
# starting from that location and walking up the filesystem tree,
# looks for a conda environment with the same name
# (with jupyter installed unless -j is specified)
#
# OPTIONS
# -j: default is to also check for the existence of a jupyter command
# in that virtualenv; this can be turned off by passing the -j option
#
# RESULT
# writes on stdout a line with 2 tokens
# rootdir condaname
# if a match could be found, and
# homedir 'base'
# otherwise
#
# RETCOD
# 0 if a conda environment
# 1 otherwise
#
# EXAMPLE
# starting from $HOME/git/flotpython/notebooks/foo.ipynb
# will search for a conda env named foo.ipynb, notebooks, flotpython, git
# if e.g. flotpython exists (read is the first to exist) then
# the output is
# $HOME/git/flotpython flotpython
# if none exists it outputs
# $HOME base


CONDA_ENVS_DIR=$HOME/miniconda3/envs

function macnb-find-enclosing-miniconda() {
    local OPTIND
    local OPTARG
    local USAGE="Usage: $FUNCNAME [-j] [startpoint]"
    local check_for_jupyter_bin=true
    local retcod=1
    # Get options
    while getopts "vjh" opt ; do
        case $opt in
            j) check_for_jupyter_bin="" ;;
            v) set -x ;;
            h) echo-stderr $USAGE; return 1 ;;
        esac
    done

    shift $(($OPTIND - 1))

    # did we receive a filename to start from ?
    local start="$1"; shift
    # no argument: start from current directory
    [ -z "$start" ] && start=$(pwd)

    [[ -n "$@" ]] && { echo-stderr $USAGE; return 1; }

    # where to stop
    local home=$(cd; pwd -P)
    # raincheck
    [ -e "$start" ] || { echo-stderr "No such file $start"; return 1; }
    [ -d "$start" ] || start=$(dirname $start)
    # walk upstairs until found
    pushd $start >& /dev/null
    while true; do
        local here=$(pwd -P)
        local stem=$(basename $here)
        local venv_path=$CONDA_ENVS_DIR/$stem
        if [ -d $venv_path ]; then
            if [ -n "$check_for_jupyter_bin" -a ! -f $venv_path/bin/jupyter ]; then
                echo-stderr "WARNING: found $venv_path no local jupyter installed - skipping"
                cd ..
                continue
            fi
            echo $here $stem
            return 0
        elif [ "$here" == $HOME -o "$here" == "/" ]; then
            echo $HOME base
            return 0
        else
            cd ..
        fi
    done
    popd >& /dev/null
    return $retcod
}




