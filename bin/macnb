#!/bin/bash
# -*- shell-script -*-
#
# some functions are defined in a separate module that can be
# helpful for writing bash preludes

source $(dirname $BASH_SOURCE)/macnb-bashrc

eval "$(conda shell.bash hook)"

#
# opening notebooks from the finder, or the command line
#
# . default mode (open): runs notebook server when needed
#
# . other modes (list, kill and all) to list or kill these processes
#
# . is able to find the most suitable virtualenv
#   by walking up the notebook path and looking
#   for a directory named exactly like a conda env
# . if not found, runs in the 'base' conda env


COMMAND=$(basename $0)


### globals
# change with options or using a symlink
ACTION=open
# change with -v option
VERBOSE=
# change with -b option
LAB=

# global used internally
MACNB_ROOT=""

### helpers
function verbose() {
    [ -z "$VERBOSE" ] && return
    echo-stderr "$@"
}

# the place to store state like tokens and logs and the like
function housekeeping() {
    local hkp=$MACNB_ROOT/.macnb
    [ -d $hkp ] || mkdir $hkp
    echo $hkp
}

function get-free-port() {
    python3 << EOF
import socket
s = socket.socket(socket.AF_INET, socket.SOCK_STREAM)
s.bind(('', 0))
addr = s.getsockname()
print(addr[1])
s.close()
EOF
}


# we need this top open a notebook relative to the jupyter server
function relative-path() {
    local root=$1; shift
    local path=$1; shift
    local abs_root=$(cd $root; pwd -P)
    if [ -d $path ]; then
        local abs_path=$(cd $path; pwd -P)
    else
        local filename=$(basename $path)
        local abs_file_dir=$(cd $(dirname $path); pwd -P)
        local abs_path=$abs_file_dir/$filename
    fi
    echo $abs_path | sed -e "s,$abs_root,,"
}


####################
# to trash...
# previous locate-root was doing:
# source $activator or deactivate
# and set-root

####################
function list-all-jupyters() {
    echo "============================== "
    local tmpjson=/tmp/$$.json
    jupyter notebook list --json > $tmpjson
    python3 << EOF
import json
with open("$tmpjson") as feed:
    records = [json.loads(line) for line in feed]
if not records:
    print("No jupyter notebook server running")
else:
    for record in records:
        print(f"{record['notebook_dir']}: pid={record['pid']} - port={record['port']}")
EOF
    echo "============================== "
    pids=$(pgrep -f jupyter)
    [ -n "$pids" ] && ps $pids
}

####################
# return 0 if false (cannot find)
# or 1 if true (the pid as recorded in our pid file is up and running)
function running-jupyter() {
    verbose "running-jupyter"
    local hkp=$(housekeeping)
    local recorded_pid=$(cat $hkp/pid 2> /dev/null)
    # return false if not found
    [ -z "$recorded_pid" ] && return 1
    # return false if process is not alive
    ps $recorded_pid >& /dev/null || return 1
    # return false if pid not found among meaningful processes
    pgrep -f jupyter-notebook | grep --silent '^'"${recorded_pid}"'$' || return 1
    return 0
}


GLOBAL_OPTIONS="--NotebookApp.iopub_data_rate_limit=10000000000"

# does not check for another running instance
function start-jupyter() {
    cd $MACNB_ROOT
    verbose "Starting jupyter in $(pwd)"
    verbose "start-jupyter"
    local token=$(echo $RANDOM-$RANDOM)
    local port=$(get-free-port)
    verbose "Using free port $port"
    local command="nohup jupyter notebook --port $port --no-browser --NotebookApp.token=\"$token\" $GLOBAL_OPTIONS"
    verbose "starting $command"
    local hkp=$(housekeeping)
    $command < /dev/null &> $hkp/log &
    echo $! > $hkp/pid
    echo $token > $hkp/token
    echo $port > $hkp/port
    cd - >& /dev/null
}


function running-or-start-jupyter() {
    running-jupyter || start-jupyter
}


function kill-jupyter() {
    local notebook
    for notebook in "$@"; do
        verbose "kill-jupyter on $notebook"
        local root_conda=$(macnb-find-enclosing-miniconda $notebook)
        MACNB_ROOT=$(cut -f 1 -d ' ' <<< $root_conda)
        local conda=$(cut -f 2 -d ' ' <<< $root_conda)
        conda activate $conda
        local hkp=$(housekeeping)
        local recorded_pid=$(cat $hkp/pid 2> /dev/null)
        # return false if not found
        [ -z "$recorded_pid" ] && { verbose "pid not found from $hkp/pid" ; return 1; }
        verbose "killing pid $pid"
        kill $recorded_pid
        rm $hkp/pid $hkp/port $hkp/token
    done
}

function list-jupyter() {
    local notebook
    for notebook in "$@"; do
        local root_conda=$(macnb-find-enclosing-miniconda $notebook)
        MACNB_ROOT=$(cut -f 1 -d ' ' <<< $root_conda)
        local conda=$(cut -f 2 -d ' ' <<< $root_conda)
        conda activate $conda
        local hkp=$(housekeeping)
        verbose "for $notebook: listing in $MACNB_ROOT"
        local pid=$(cat $hkp/pid 2> /dev/null)
        if [ -z "$pid" ]; then
            echo "No jupyter running in dir $MACNB_ROOT"
        else
            ps $pid
        fi
    done
}

function open-notebooks() {
    local notebook
    for notebook in "$@"; do
        verbose dealing with notebook $notebook
        local path=""
        local _path; for _path in "$notebook".ipynb "$notebook"; do
            verbose "Trying file $_path"
            [ -e $_path ] && { path=$_path; break; }
            verbose nope
        done
        if [ -z "$path" ]; then
            echo "Cannot spot notebook $notebook - ignored" >& 2
            continue
        fi
        verbose path=$path
        local root_conda=$(macnb-find-enclosing-miniconda $notebook)
        MACNB_ROOT=$(cut -f 1 -d ' ' <<< $root_conda)
        local conda=$(cut -f 2 -d ' ' <<< $root_conda)
        conda activate $conda

        # at this point MACNB_ROOT is set
        running-or-start-jupyter
        local hkp=$(housekeeping)
        local port=$(cat $hkp/port)
        local token=$(cat $hkp/token)

        local url=
        if [ -d "$path" ]; then
            if [ -z "$LAB" ]; then
                url="http://localhost:$port/tree$(relative-path $MACNB_ROOT $path)"
            else
                url="http://localhost:$port/lab"
            fi
        else
            if [ -z "$LAB" ]; then
                url="http://localhost:$port/notebooks$(relative-path $MACNB_ROOT $path)"
            else
                url="http://localhost:$port/lab/tree$(relative-path $MACNB_ROOT $path)"
            fi
        fi
        url="$url?token=$token"
        verbose "opening url $url"
        # on linux: open is not available, but xdg-open is
        local open_program=open
        type xdg-open >& /dev/null && open_program=xdg-open
        $open_program $url
    done
}

USAGE="Usage: $COMMAND [options] [-l] [-a] [-k]
   or: $COMMAND [options] [notebooks or dirs]
Modes:
  -l: list running jupyter in this dir (default if commmand contains 'list')
  -a: list all running jupyters (default if command contains 'all')
  -k: kill jupyter (default if command contains 'kill')
  otherwise: open notebook(s) or directory in browser
Options:
  -v: verbose
  -b: use jupyterlab
"

function main() {
    local OPTIND
    local OPTARG
    while getopts "klavb" opt; do
        case $opt in
            k) ACTION=kill;;
            l) ACTION=list;;
            a) ACTION=list_all;;
            v) VERBOSE=true;;
            b) LAB=true;;
            \?) >&2 printf "$USAGE" ; exit 1;;
        esac
    done
    shift $(($OPTIND - 1))

    local args
    if [[ -z "$@" ]]; then
        args="."
    else
        args="$@"
    fi

    case "$ACTION" in
        list_all) list-all-jupyters;;
        kill) kill-jupyter $args;;
        list) list-jupyter $args;;
        *) open-notebooks  $args;;
    esac
}

# get implicit options from the command name - allows to use symlinks
[[ "$COMMAND" =~ .*kill.* ]] && ACTION=kill
[[ "$COMMAND" =~ .*list.* ]] && ACTION=list
[[ "$COMMAND" =~ .*all.* ]] && ACTION=list_all

main "$@"
